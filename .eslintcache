[{"/Users/dema/work/industry-process/src/reportWebVitals.js":"1","/Users/dema/work/industry-process/src/App.js":"2","/Users/dema/work/industry-process/src/box.js":"3","/Users/dema/work/industry-process/src/block.js":"4","/Users/dema/work/industry-process/src/index.js":"5"},{"size":580,"mtime":1609407637536,"results":"6","hashOfConfig":"7"},{"size":376,"mtime":1609409129593,"results":"8","hashOfConfig":"7"},{"size":3604,"mtime":1609909846460,"results":"9","hashOfConfig":"7"},{"size":11647,"mtime":1609988685890,"results":"10","hashOfConfig":"7"},{"size":708,"mtime":1609407638522,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fssoub",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dema/work/industry-process/src/reportWebVitals.js",[],"/Users/dema/work/industry-process/src/App.js",[],"/Users/dema/work/industry-process/src/box.js",["24","25","26","27","28","29"],"/*\n * @Author: your name\n * @Date: 2020-12-31 18:03:10\n * @LastEditTime: 2021-01-06 13:10:46\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /industry-process/src/box.js\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Block from \"./block\";\nimport \"./index.css\";\nimport rebackIcon from './static/reback.png';\nimport saveIcon from './static/save.png';\n\n\n// window.onbeforeunload = function(event) { \n//     window.confirm('页面即将刷新或关闭？');\n// }; \n\nclass Box extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapData: [\n        {\n          index:0,\n          text:'罐',\n          type: \"box\",\n          top: 100,\n          left: 150,\n          rotate:0\n        },\n        // {\n        //   index:1,\n        //   type: \"pipe\",\n        //   top: 50,\n        //   left: 400,\n        //   derection: \"row\",\n        // },\n        // {\n        //   index:2,\n        //   type: \"box\",\n        //   top: 50,\n        //   left: 600,\n        // },\n        // {\n        //   index:3,\n        //   type: \"pipe\",\n        //   top: 250,\n        //   left: 600,\n        //   derection: \"column\",\n        // },\n      ],\n    };\n  }\n\n  addBlock=(obj)=>{\n    return new Promise((resolve,reject)=>{\n        this.setState({\n            mapData:this.state.mapData.concat([{...obj}])\n        },()=>{\n            console.log({'mapData':this.state.mapData});\n\n            resolve(true);\n        })\n    });\n  }\n\n  updateMap=(obj)=>{    //更新\n    // console.log({obj});\n    const {index} = obj;\n    let temp = this.state.mapData;\n    temp[index] = {\n        ...this.state.mapData[index],\n        ...obj\n    }\n    this.setState({\n        mapData:temp\n    },()=>{\n        console.log({'mapData':this.state.mapData});\n    })\n    // const needModifyObj = this.state.mapData.filter(item=>item.index==index);\n\n  }\n\n  reback=()=>{    //返回上一步，不包括旋转\n       const needDelIndex = this.state.mapData[this.state.mapData.length-1].index;\n       if(needDelIndex != 0 ){\n            // console.log({needDelIndex});\n            const needArr = this.state.mapData.filter(item=>item.index != needDelIndex);\n            this.setState({\n                mapData:needArr\n            },()=>{\n                this.reduceBoxIndex();\n            })\n       }\n       \n  }\n\n  getBox=(index)=>{    //获取\n      return this.state.mapData.filter(item=>item.index == index);\n  }\n\n\n  componentDidMount () {\n    // 拦截判断是否离开当前页面\n    window.addEventListener('beforeunload', this.beforeunload);\n  }\n  componentWillUnmount () {\n    // 销毁拦截判断是否离开当前页面\n    window.removeEventListener('beforeunload', this.beforeunload);\n  }\n  beforeunload (e) {\n    let confirmationMessage = '你确定离开此页面吗?';\n    (e || window.event).returnValue = confirmationMessage;\n    return confirmationMessage;\n  }\n\n  onRef = (func) => {\n    this.reduceBoxIndex = func;\n  }\n\n  render() {\n    return (\n      <div className=\"map\" onClick={() => {}}>\n        <img className=\"rebackBtn\" onClick={()=>this.reback()} src={rebackIcon} />\n        <img className=\"saveBtn\" onClick={()=>this.reback()} src={saveIcon} />\n        {this.state.mapData.map((item, index) => {\n          return <Block \n                   data={item} \n                   onRef={this.onRef}\n                   addBlock={this.addBlock}\n                   updateMap ={this.updateMap}\n                   getBox={this.getBox}\n                   key={index} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Box;\n","/Users/dema/work/industry-process/src/block.js",["30","31","32","33","34","35","36","37"],"/*\n * @Author: your name\n * @Date: 2020-12-31 18:08:49\n * @LastEditTime: 2021-01-07 11:04:45\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /industry-process/src/block.js\n */\n\nimport \"./index.css\";\nimport React, {useEffect, useState } from \"react\";\nimport { Menu, Dropdown, Button, Cascader,Switch } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport img from \"./static/rotate.png\";\n\n// function handleButtonClick(e) {\n//   message.info(\"Click on left button.\");\n//   console.log(\"click left button\", e);\n// }\n\nconsole.log(\"刷新\");\nlet boxIndex = 0;\n\nfunction Block(props) {\n//   console.log({ props });\n  const { updateMap,addBlock, getBox, data } = props;\n  const { type, top, left, derection, index, pipeType, rotate,text,ifOpen } = data;\n  const [ifedit, setIfedit] = useState(false);\n  const [current, setCurrent] = useState({});\n  const [newBox, setnewBox] = useState({});\n\n  //   const [pipeType,setpipeType] = useState('直线管道');\n  if(index==16){\n    console.log({data});\n  }\n  \n\n  const derecHandle = (e) => {\n    // console.log(\"derec\", e);\n    if (e[\"key\"] === \"上\") {\n      setnewBox({\n        ...newBox,\n        derection: \"column\",\n        top: newBox[\"top\"] - 150,\n      });\n    }\n    if (e[\"key\"] === \"下\") {\n      setnewBox({\n        ...newBox,\n        derection: \"column\",\n        top: newBox[\"top\"] + 150,\n      });\n    }\n    if (e[\"key\"] === \"左\") {\n      setnewBox({\n        ...newBox,\n        derection: \"row\",\n        left: newBox[\"left\"] - 150,\n      });\n    }\n    if (e[\"key\"] === \"右\") {\n      let temp = {\n        ...newBox,\n        derection: \"row\",\n        left: current[\"left\"] + 150,\n      };\n\n      setnewBox({\n        ...temp,\n      });\n      //   console.log({ newBox, temp });\n    }\n    // console.log({newBox});\n  };\n\n  const btnClick = (e) => {\n    // console.log({ newBox, boxIndex });\n    e.stopPropagation();\n    //罐\n    if (newBox[\"type\"] === \"box\") {\n        addBlock({\n        ...newBox,\n        index: boxIndex + 1,\n      });\n      boxIndex = boxIndex + 1;\n    }\n    //阀门\n    if (newBox[\"type\"] === \"valve\") {\n        addBlock({\n        ...newBox,\n        index: boxIndex + 1,\n      });\n      boxIndex = boxIndex + 1;\n    }\n    //流量计\n    if (newBox[\"type\"] === \"flow\") {\n        addBlock({\n        ...newBox,\n        index: boxIndex + 1,\n      });\n      boxIndex = boxIndex + 1;\n    }\n    //管道\n    if (newBox[\"type\"] === \"pipe\") {\n     \n      addBlock({\n        ...newBox,\n        index: boxIndex + 1,\n        type: \"pipe\",\n      }).then((bool) => {\n        if (bool) {\n          boxIndex = boxIndex + 1;\n          //   update({\n          //     ...newBox,\n          //     index: newBox[\"index\"] + 2,\n          //     type: \"box\",\n          //     left: newBox['derection']=='column'?newBox[\"left\"]:newBox[\"left\"] + 200,\n          //     top:newBox['derection']=='column'?newBox[\"top\"] + 200:newBox[\"top\"]\n          //   });\n        }\n      });\n    }\n  };\n\n  const options = [\n    {\n      value: \"罐\",\n      label: \"罐\",\n    },\n    {\n      value: \"管道\",\n      label: \"管道\",\n      children: [\n        {\n          value: \"直线管道\",\n          label: \"直线管道\",\n        },\n        {\n          value: \"t字管道\",\n          label: \"t字管道\",\n        },\n        {\n          value: \"L字管道\",\n          label: \"L字管道\",\n        },\n      ],\n    },\n    {\n      value: \"阀门\",\n      label: \"阀门\",\n    },\n    {\n      value: \"流量计\",\n      label: \"流量计\",\n    },\n  ];\n\n  const onChange = (value, selectedOptions) => {\n    // console.log({ value, selectedOptions });\n    // console.log(value[0]);\n    // console.log(value[1]);\n\n    if (value[0] === \"罐\") {\n      setnewBox({\n        ...current,\n        text:'罐',\n        type: \"box\",\n      });\n    }\n\n    if (value[0] === \"阀门\") {\n      setnewBox({\n        ...current,\n        text:'阀门',\n        ifOpen:true,\n        type: \"valve\",\n      });\n    }\n\n    if (value[0] === \"流量计\") {\n        setnewBox({\n          ...current,\n          text:'流量计',\n          type: \"flow\",\n        });\n      }\n\n    if (value[0] === \"管道\") {\n      if (value[1] === \"直线管道\") {\n        setnewBox({\n          ...current,\n          type: \"pipe\",\n          text:'直线管道',\n          pipeType: \"直线管道\",\n        });\n        // setpipeType('直线管道');\n      }\n      if (value[1] === \"t字管道\") {\n        setnewBox({\n          ...current,\n          type: \"pipe\",\n          text:'t字管道',\n          pipeType: \"t字管道\",\n        });\n        // setpipeType('t字管道');\n      }\n      if (value[1] === \"L字管道\") {\n        setnewBox({\n          ...current,\n          type: \"pipe\",\n          text:'L字管道',\n          pipeType: \"L字管道\",\n        });\n        // setpipeType('t字管道');\n      }\n    }\n  };\n\n  const derecMenu = (\n    <Menu onClick={derecHandle}>\n      <Menu.Item key=\"上\">上</Menu.Item>\n      <Menu.Item key=\"下\">下</Menu.Item>\n      <Menu.Item key=\"左\">左</Menu.Item>\n      <Menu.Item key=\"右\">右</Menu.Item>\n    </Menu>\n  );\n\n  const startEdit = (index) => {\n    setCurrent(getBox(index)[0]);\n    // console.log(getBox(index)[0]);\n    setIfedit(true);\n  };\n\n  useEffect(() => {\n      props.onRef(rebackToPrev)\n  }, []);\n\n  const rotatePipe = (e,index) => {\n        // console.log({'旋转index':index});\n        e.stopPropagation();\n        updateMap({\n            ...getBox(index)[0],\n            rotate:getBox(index)[0].rotate+90\n        });\n  };\n\n  const rebackToPrev=()=>{\n    boxIndex = boxIndex - 1;\n    console.log('boxIndex减1')\n  }\n\n  const inputHandle = (e,index)=>{\n    // console.log({e,index});\n    updateMap({\n        ...getBox(index)[0],\n        text:e.target.value\n    });\n  }\n\n  const switchHandle = (checked)=>{\n    //    console.log({checked});\n    updateMap({\n        ...getBox(index)[0],\n        ifOpen:checked\n    });\n  }\n\n  return (\n    <div\n      className=\"block\"\n      style={\n        pipeType === \"t字管道\"\n          ? { top: top + \"px\", left: left + \"px\" }\n          : { top: top + \"px\", left: left + \"px\" }\n      }\n      onMouseEnter={() => startEdit(index)}\n      onMouseLeave={() => setIfedit(false)}\n    >\n      {type === \"box\" && (\n        <div className=\"tank\">\n          <div><input className=\"input\"  onChange={e=>inputHandle(e,index)}  value={text} /></div>\n          <div className=\"option\">\n            {ifedit && (\n              <Cascader\n                options={options}\n                onChange={onChange}\n                placeholder=\"对象\"\n              />\n            )}\n            {ifedit && (\n              <Dropdown overlay={derecMenu}>\n                <Button>\n                  指向 <DownOutlined />\n                </Button>\n              </Dropdown>\n            )}\n            {ifedit && (\n              <Button type=\"primary\" onClick={btnClick}>\n                确定\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n      {\n          type === \"flow\" &&(\n              <div className=\"flow\">\n                    {/* 点击旋转按钮 */}\n                    {ifedit && (\n                        <img\n                        className=\"rotateBtn\"\n                        src={img}\n                        onClick={(e) => rotatePipe(e,index)}\n                        />\n                    )}\n                    <div className=\"option\">\n                        {ifedit && (\n                        <Cascader\n                            options={options}\n                            onChange={onChange}\n                            placeholder=\"对象\"\n                        />\n                        )}\n                        {ifedit && (\n                        <Dropdown overlay={derecMenu}>\n                            <Button>\n                            指向 <DownOutlined />\n                            </Button>\n                        </Dropdown>\n                        )}\n                        {ifedit && (\n                        <Button type=\"primary\" onClick={btnClick}>\n                            确定\n                        </Button>\n                        )}\n                    </div>\n                    <div className=\"flowInner\" style={{ transform: `rotate(${rotate}deg)` }}>\n                    <div className=\"flowBlock\">\n                    <input className=\"input\" style={{backgroundColor:'transparent',border:'none',textAlign:'center'}} onChange={e=>inputHandle(e,index)}  value={text} />\n                    </div>\n                    </div>\n              </div>\n          )\n      }\n      {type === \"valve\" && (\n        <div className=\"valve\">\n          {/* 点击旋转按钮 */}\n          {ifedit && (\n            <img\n              className=\"rotateBtn\"\n              src={img}\n              onClick={(e) => rotatePipe(e,index)}\n            />\n          )}\n          <div className=\"option\">\n            {ifedit && (\n              <Cascader\n                options={options}\n                onChange={onChange}\n                placeholder=\"对象\"\n              />\n            )}\n            {ifedit && (\n              <Dropdown overlay={derecMenu}>\n                <Button>\n                  指向 <DownOutlined />\n                </Button>\n              </Dropdown>\n            )}\n            {ifedit && (\n              <Button type=\"primary\" onClick={btnClick}>\n                确定\n              </Button>\n            )}\n          </div>\n          <div className=\"valveInner\" style={{ transform: `rotate(${rotate}deg)` }}>\n          <div className=\"valveBlock\">\n          <Switch checked={ifOpen} onChange={switchHandle} />\n          <input className=\"input\" style={{backgroundColor:'transparent',border:'none',display:'flex',width:'100%',textAlign:'center',justifyContent:'center',alignItems:'center'}} onChange={e=>inputHandle(e,index)}  value={text} />\n          </div>\n          </div>\n        </div>\n      )}\n      {type === \"pipe\" && (\n        <div className=\"pipe\">\n          {/* 点击旋转按钮 */}\n          {ifedit && (\n            <img\n              className=\"rotateBtn\"\n              src={img}\n              onClick={(e) => rotatePipe(e,index)}\n            />\n          )}\n          <div className=\"option\">\n            {ifedit && (\n              <Cascader\n                options={options}\n                onChange={onChange}\n                placeholder=\"对象\"\n              />\n            )}\n            {ifedit && (\n              <Dropdown overlay={derecMenu}>\n                <Button>\n                  指向 <DownOutlined />\n                </Button>\n              </Dropdown>\n            )}\n            {ifedit && (\n              <Button type=\"primary\" onClick={btnClick}>\n                确定\n              </Button>\n            )}\n          </div>\n\n          <div className=\"pipeInner\" style={{ transform: `rotate(${rotate}deg)` }}>\n          {pipeType == \"直线管道\" && (\n            <div\n              className=\"linePipe\"\n              style={{\n                transform:\n                  derection === \"column\" ? \"rotate(90deg)\" : \"rotate(0deg)\",\n              }}\n            ></div>\n          )}\n          {pipeType == \"t字管道\" && (\n            <div\n              className=\"t-pipe\"\n            >\n              <div className=\"up\" />\n              <div className=\"mid\" />\n           \n            </div>\n          )}\n          {pipeType == \"L字管道\" && (\n            <div className=\"l-pipe\">\n              <div className=\"mid\" />\n              <div className=\"down\" />\n            </div>\n          )}\n          </div>\n\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Block;\n","/Users/dema/work/industry-process/src/index.js",[],{"ruleId":"38","severity":1,"message":"39","line":11,"column":8,"nodeType":"40","messageId":"41","endLine":11,"endColumn":16},{"ruleId":"42","severity":1,"message":"43","line":90,"column":24,"nodeType":"44","messageId":"45","endLine":90,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":92,"column":72,"nodeType":"44","messageId":"45","endLine":92,"endColumn":74},{"ruleId":"42","severity":1,"message":"46","line":103,"column":57,"nodeType":"44","messageId":"45","endLine":103,"endColumn":59},{"ruleId":"47","severity":1,"message":"48","line":128,"column":9,"nodeType":"49","endLine":128,"endColumn":83},{"ruleId":"47","severity":1,"message":"48","line":129,"column":9,"nodeType":"49","endLine":129,"endColumn":79},{"ruleId":"42","severity":1,"message":"46","line":33,"column":11,"nodeType":"44","messageId":"45","endLine":33,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":236,"column":6,"nodeType":"52","endLine":236,"endColumn":8,"suggestions":"53"},{"ruleId":"47","severity":1,"message":"48","line":310,"column":25,"nodeType":"49","endLine":314,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":349,"column":13,"nodeType":"49","endLine":353,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":388,"column":13,"nodeType":"49","endLine":392,"endColumn":15},{"ruleId":"42","severity":1,"message":"46","line":417,"column":21,"nodeType":"44","messageId":"45","endLine":417,"endColumn":23},{"ruleId":"42","severity":1,"message":"46","line":426,"column":21,"nodeType":"44","messageId":"45","endLine":426,"endColumn":23},{"ruleId":"42","severity":1,"message":"46","line":435,"column":21,"nodeType":"44","messageId":"45","endLine":435,"endColumn":23},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["54"],{"desc":"55","fix":"56"},"Update the dependencies array to be: [props]",{"range":"57","text":"58"},[5060,5062],"[props]"]